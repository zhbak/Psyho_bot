from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import orm, database
from bot_infrastucture import buttons, texts
from psyai import prompts, psy_chat
from langchain_community.chat_message_histories import RedisChatMessageHistory
from bot_infrastucture import config
import random



def start_message(bot):
    @bot.message_handler(commands=["start"])
    async def start(message):  
        
        chat_id = message.chat.id
        
        # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü—Ä–æ–≤–µ—Ä—è—Ç —Å—Ç–∞—Ä–æ–≥–æ
        # –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ c –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ psy_chat –∏ –æ–ø–ª–∞—Ç—ã
        await bot.send_message(chat_id, text = await texts.start_text_statistic(message), parse_mode="HTML", reply_markup= buttons.start_buttons())

        # –ó–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ redis
        await orm.execute_redis_command(database.pool, "hset", "status", chat_id, 0)



def start_button_handler(bot):
    @bot.callback_query_handler(func=lambda call: True)
    async def query_handler(call):
        chat_id = call.message.chat.id
        if call.data == 'pushed_start_psychat_btn':
            user_state = await orm.execute_redis_command(database.pool, "hget", "status", call.message.chat.id) 
            user_info = await orm.user_check(call.message.chat.id, call.message.date)
            if user_state == "1":
                await orm.change_user_session_count(user_info, call.message.date) # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¥–æ —ç—Ç–æ–≥–æ –±—ã–ª –≤ psy_chat
            await orm.execute_redis_command(database.pool, "hset", "status", call.message.chat.id, 1) # –ó–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è 
            if await orm.execute_redis_command(database.pool, "exists", f"message_store:{chat_id}"):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤ Redis –∏—Å—Ç–æ—Ä–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π. –ï—Å–ª–∏ –¥–∞, —É–¥–∞–ª—è–µ–º.
                await orm.execute_redis_command(database.pool, "delete", f"message_store:{chat_id}")
            
            if user_info.remaining_sessions_count > 0: # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                await bot.send_message(chat_id=chat_id, text=texts.start_psy_chat_text)
                await orm.execute_redis_command(database.pool, "hset", "tasks", chat_id, f"{prompts.tasks[0]}") # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è system_prompt
                await bot.send_message(chat_id, text="–æ–∫1", parse_mode="HTML")
                chat_history = RedisChatMessageHistory(session_id=f"{chat_id}", url=f"{database.redis_url}")
                await bot.send_message(chat_id, text="–æ–∫2", parse_mode="HTML")
                user_input = f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {call.message.chat.first_name}. –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –º–µ–Ω—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º üëã"
                await bot.send_message(chat_id, text="–æ–∫2.5", parse_mode="HTML")
                response = await psy_chat.psyho_chat(prompts.system_prompt, str(user_input), database.pool, chat_id, chat_history, config.chat) # –û—Ç–≤–µ—Ç psychat –Ω–∞ –ø–µ—Ä–≤—ã–π user_input
                await bot.send_message(chat_id, text="–æ–∫3", parse_mode="HTML")
                await psy_chat.dynamic_task_change(chat_id, database.pool, prompts.tasks, response.content)
                await bot.send_message(chat_id, text="–æ–∫4", parse_mode="HTML")
                await bot.send_message(chat_id, text=response.content, parse_mode="HTML")

            else:
                markup = InlineKeyboardMarkup()
                start_pay_btn = InlineKeyboardButton("üí≥", callback_data="pushed_start_pay_btn")
                markup = markup.add(start_pay_btn)
                await bot.send_message(chat_id, text="–¢–≤–æ–π –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π –∏—Å—Å—Å—è–∫.\n\n –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Å–µ—Å—Å–∏–∏ –Ω–∞–∂–º–∏ üí≥", reply_markup=markup)
                     
        elif call.data == 'pushed_start_pay_btn':
            await bot.send_message(chat_id=call.message.chat.id, text="–≠—Ç–∞ —É—Å–ª—É–≥–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ üîú", parse_mode="HTML")
        await bot.answer_callback_query(callback_query_id=call.id) 



def psy_chat_handler(bot):
    @bot.message_handler(func=lambda message: True)
    async def handle_messages(message):
        chat_id = message.chat.id
        user_status = await orm.execute_redis_command(database.pool, "hget", "status", chat_id)
        if user_status == "1":
            user_info = await orm.get_user_data(chat_id)
            
            if user_info.remaining_sessions_count > 0:
                chat_history = RedisChatMessageHistory(session_id=f"{chat_id}", url=f"{database.redis_url}")
                stored_messages = chat_history.messages
                last_message = stored_messages[-2]

                if len(chat_history.messages) == 10: 
                    await bot.send_message(chat_id, random.choice(texts.pause_phrases), parse_mode="HTML")
                    response = await psy_chat.psyho_chat(system_prompt="–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥. –ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏. –ó–Ω–∞–π —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç—ã –±—É–¥–µ—à—å –ø—Ä–æ—â–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º.", user_input=message.text, redis_pool=database.pool, chat_id=chat_id, chat_history=chat_history, chat=config.chat)
                    await psy_chat.dynamic_task_change(chat_id, database.pool, prompts.tasks, response.content)
                    await bot.send_message(chat_id, text=response.content + "\n\n–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏ üòî", parse_mode="HTML")

                elif len(chat_history.messages) >= 12: 
                    await bot.send_message(chat_id, random.choice(texts.pause_phrases), parse_mode="HTML")
                    response = await psy_chat.psyho_chat(system_prompt="–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥. –ü–æ–ø—Ä–∞—â–∞–π—Å—è.", user_input="–ü–æ–ø—Ä–∞—â–∞–π—Å—è —Å–æ –º–Ω–æ–π", redis_pool=database.pool, chat_id=chat_id, chat_history=chat_history, chat=config.chat)
                    await bot.send_message(chat_id, text=response.content + "\n\n–°–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.", parse_mode="HTML")
                    await orm.execute_redis_command(database.pool, "hdel", "tasks", "chat_id") 
                    await orm.execute_redis_command(database.pool, "delete", f"message_store:{chat_id}")            

                # elif len(chat_history.messages) <= 2:
                #     response = await psy_chat.psyho_chat(prompts.system_prompt, message.text, database.pool, chat_id, chat_history, config.chat) 
                #     await psy_chat.dynamic_task_change(chat_id, database.pool, prompts.tasks, response.content)
                #     await bot.send_message(chat_id, text=response.content)

                elif "–î–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏!" in last_message:
                    await bot.send_message(chat_id, text="–°–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.", parse_mode="HTML")
                    await orm.execute_redis_command(database.pool, "hdel", "tasks", chat_id) 
                    await orm.execute_redis_command(database.pool, "delete", f"message_store:{chat_id}")    

                else:
                    await bot.send_message(chat_id, random.choice(texts.pause_phrases), parse_mode="HTML")
                    response = await psy_chat.psyho_chat(prompts.system_prompt, message.text, database.pool, chat_id, chat_history, config.chat) 
                    await psy_chat.dynamic_task_change(chat_id, database.pool, prompts.tasks, response.content)
                    await bot.send_message(chat_id, text=response.content, parse_mode="HTML")

        else:
            await bot.send_message(chat_id=chat_id, text=f"–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å üëæ", parse_mode="HTML")
