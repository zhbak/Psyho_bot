from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import orm, database
from bot_infrastucture import buttons, texts
from psyai import prompts, psy_chat
from langchain_community.chat_message_histories import RedisChatMessageHistory
#from psyai.redis_chat import RedisChatMessageHistory
from bot_infrastucture import config
import random
import logging

logger = logging.getLogger(__name__)



def start_message(bot):
    @bot.message_handler(commands=["start"])
    async def start(message):  
        
        chat_id = message.chat.id
        
        # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü—Ä–æ–≤–µ—Ä—è—Ç —Å—Ç–∞—Ä–æ–≥–æ
        # –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ c –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ psy_chat –∏ –æ–ø–ª–∞—Ç—ã
        await bot.send_message(chat_id, text = await texts.start_text_statistic(message), parse_mode="HTML", reply_markup= buttons.start_buttons())

        # –ó–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ redis
        await orm.execute_redis_command(database.pool, "hset", "status", chat_id, 0)



def start_button_handler(bot):
    @bot.callback_query_handler(func=lambda call: True)
    async def query_handler(call):
        chat_id = call.message.chat.id
        await bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
        if call.data == 'pushed_start_psychat_btn':
            user_state = await orm.execute_redis_command(database.pool, "hget", "status", call.message.chat.id) 
            logger.info("User state —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %s", user_state)
            user_info = await orm.user_check(call.message.chat.id, call.message.date)
            if user_state == "1":
                await orm.change_user_session_count(user_info, call.message.date) # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¥–æ —ç—Ç–æ–≥–æ –±—ã–ª –≤ psy_chat
            await orm.execute_redis_command(database.pool, "hset", "status", call.message.chat.id, 1) # –ó–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è 
            if await orm.execute_redis_command(database.pool, "exists", f"message_store:{chat_id}"):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤ Redis –∏—Å—Ç–æ—Ä–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π. –ï—Å–ª–∏ –¥–∞, —É–¥–∞–ª—è–µ–º.
                await orm.execute_redis_command(database.pool, "delete", f"message_store:{chat_id}")
            
            if user_info.remaining_sessions_count > 0: # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                await bot.send_message(chat_id=chat_id, text=texts.start_psy_chat_text)
                await orm.execute_redis_command(database.pool, "hset", "tasks", chat_id, f"{prompts.tasks[0]}") # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è system_prompt
                logger.info("–ó–∞–¥–∞—á–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %s", prompts.tasks[0])
                #RedisChatMessageHistory(session_id=f"{chat_id}", url = database.redis_url)
                user_input = f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {call.message.chat.first_name}. –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –º–µ–Ω—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º üëã"
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å HGET
                logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤–µ—Ç")
                response = await psy_chat.psyho_chat(prompts.system_prompt, user_input, database.pool, chat_id, config.chat, database.redis_url) # –û—Ç–≤–µ—Ç psychat –Ω–∞ –ø–µ—Ä–≤—ã–π user_input
                await bot.send_message(chat_id, text=response.content, parse_mode="HTML")
                logger.info("–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω")
                await psy_chat.dynamic_task_change(chat_id, database.pool, prompts.tasks, response.content)

            else:
                markup = InlineKeyboardMarkup()
                start_pay_btn = InlineKeyboardButton("üí≥", callback_data="pushed_start_pay_btn")
                markup = markup.add(start_pay_btn)
                await bot.send_message(chat_id, text="–¢–≤–æ–π –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π –∏—Å—Å—Å—è–∫.\n\n–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Å–µ—Å—Å–∏–∏ –Ω–∞–∂–º–∏ üí≥", reply_markup=markup)
                     
        elif call.data == 'pushed_start_pay_btn':
            await bot.send_message(chat_id=call.message.chat.id, text="–≠—Ç–∞ —É—Å–ª—É–≥–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ üîú", parse_mode="HTML")
        await bot.answer_callback_query(callback_query_id=call.id) 



def psy_chat_handler(bot):
    @bot.message_handler(func=lambda message: True)
    async def handle_messages(message):
        chat_id = message.chat.id
        user_status = await orm.execute_redis_command(database.pool, "hget", "status", chat_id)
        if user_status == "1":
            logger.info("–°—Ç–∞—Ç—É—Å —Ä–∞–≤–µ–Ω 1: %s", user_status)
            user_info = await orm.get_user_data(chat_id)
            
            logger.info("–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: %s", user_info.remaining_sessions_count)
            if user_info.remaining_sessions_count > 0:
                chat_history = RedisChatMessageHistory(session_id=f"{chat_id}", url=f"{database.redis_url}")
                stored_messages = chat_history.messages
                message_count = len(stored_messages)
                last_message = stored_messages[-2]

                logger.info("–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %s", message_count)
                if message_count == 14: 
                    waiting_message = await bot.send_message(chat_id, random.choice(texts.pause_phrases), parse_mode="HTML", timeout=20)
                    await  orm.execute_redis_command(database.pool, "hset", "tasks", chat_id, f"{prompts.tasks[3]}")
                    response = await psy_chat.psyho_chat(system_prompt=prompts.system_prompt, user_input=message.text, pool=database.pool, chat_id=chat_id, chat=config.chat, redis_url=database.redis_url)
                    await bot.send_message(chat_id, text=response.content + "\n\n–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏ üòî", parse_mode="HTML")
                    await bot.delete_message(chat_id=chat_id, message_id=waiting_message.message_id)
                    await psy_chat.dynamic_task_change(chat_id, database.pool, prompts.tasks, response.content)

                elif message_count >= 16: 
                    waiting_message = await bot.send_message(chat_id, random.choice(texts.pause_phrases), parse_mode="HTML", timeout=20)
                    await  orm.execute_redis_command(database.pool, "hset", "tasks", chat_id, f"{prompts.tasks[4]}")
                    response = await psy_chat.psyho_chat(system_prompt=prompts.system_prompt, user_input=message.text, pool=database.pool, chat_id=chat_id, chat=config.chat, redis_url=database.redis_url)
                    await bot.send_message(chat_id, text=response.content + "\n\n–°–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.\n\n–ü–µ—Ä–µ–π–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏ /start.", parse_mode="HTML")
                    await bot.delete_message(chat_id=chat_id, message_id=waiting_message.message_id)
                    await orm.execute_redis_command(database.pool, "hdel", "tasks", "chat_id") 
                    await orm.execute_redis_command(database.pool, "delete", f"message_store:{chat_id}")            

                # elif len(chat_history.messages) <= 2:
                #     response = await psy_chat.psyho_chat(prompts.system_prompt, message.text, database.pool, chat_id, config.chat) 
                #     await psy_chat.dynamic_task_change(chat_id, database.pool, prompts.tasks, response.content)
                #     await bot.send_message(chat_id, text=response.content)

                elif "–î–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏!" in last_message:
                    await bot.send_message(chat_id, text="–°–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.\n\n–ü–µ—Ä–µ–π–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏ /start.", parse_mode="HTML")
                    await orm.execute_redis_command(database.pool, "hdel", "tasks", chat_id) 
                    await orm.execute_redis_command(database.pool, "delete", f"message_store:{chat_id}")    

                else:
                    waiting_message = await bot.send_message(chat_id, random.choice(texts.pause_phrases), parse_mode="HTML", timeout=10)
                    response = await psy_chat.psyho_chat(prompts.system_prompt, message.text, database.pool, chat_id, config.chat, database.redis_url)
                    await bot.send_message(chat_id, text=response.content, parse_mode="HTML")
                    await bot.delete_message(chat_id=chat_id, message_id=waiting_message.message_id)
                    await psy_chat.dynamic_task_change(chat_id, database.pool, prompts.tasks, response.content)
                    
            else:
               markup = InlineKeyboardMarkup()
               start_pay_btn = InlineKeyboardButton("üí≥", callback_data="pushed_start_pay_btn")
               markup = markup.add(start_pay_btn)
               await bot.send_message(chat_id, text="–¢–≤–æ–π –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π –∏—Å—Å—Å—è–∫.\n\n –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Å–µ—Å—Å–∏–∏ –Ω–∞–∂–º–∏ üí≥", reply_markup=markup)
            
        else:
            await bot.send_message(chat_id=chat_id, text=f"–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å üëæ\n\n–ü–µ—Ä–µ–π–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @zhbakov.", parse_mode="HTML")
